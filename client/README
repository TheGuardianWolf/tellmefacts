tellmefacts Slack Bot Client ================

The tellmefacts bot was created to multiplex chat conversations to multiple fact bots that use a supported API. Slack users are able to pick between configured bots by issuing commands to the bot, and subsequently chat with a connected bot. Essentially, the bot acts as a relay client to connected bots.

The bot must be mentioned via its bot user name as set in your Slack team, and moved into the channel that it is intended to be used in.

An example of typical conversation would look like this:

``` sourceCode
user: @tellmefacts list
bot:  1. Interesting Facts
      2. Strange Facts
      3. Unusual Facts
user: @tellmefacts start_session Strange Facts
bot:  You are now chatting with Strange Facts.
user: @tellmefacts Give me a fact.
bot:  Strange Facts: #1 Banging your head against a wall burns 150 calories an hour.
user: @tellmefacts end_session
bot:  Chat session with Strange Facts ended.
```

Bot keyword commands
====================

The bot accepts the following commands:

**list**

Usage: `@tellmefacts list`

Lists the currently available bots the client can connect to as set in the configuration.

**start\_session**

Usage: `@tellmefacts start_session <bot_name>`

Start a session with one of the available bots on the list. Invalid names will produce an error message. Cannot start another session if currently in a session.

**end\_session**

Usage: `@tellmefacts end_session`

Ends a current bot session. If not in an active session, an error is produced.

Launcher
========

A launcher script is provided as `run_client.py` that can be used to launch the application. Several command line options are built in as follows:

``` sourceCode
This is the launcher for the multibot-client application.

 usage: run_client.py [-h] [--with-tests] [--only-tests]
                     [--config-dir CONFIG_DIR] [--api-hostname API_HOSTNAME]
                     [--terminal] [--verbose]

 Launches the slackbot client.

 optional arguments:
 -h, --help            show this help message and exit
 --config-dir CONFIG_DIR
                         changes the config directory
 --api-hostname API_HOSTNAME
                         sets a hostname other than slack.com
 --terminal            set bot to run in terminal mode
 --verbose             display all logging information on terminal
```

These launcher options are useful for debugging the application.

Configuration
=============

Configuration of Slack tokens and bot connections are done externally in a config folder. By default this is located in the bot's directory under the folder `config`. This can be changed easily through a launcher switch.

The following config files are needed to run this bot:

**bots.json** - configures bot urls and names.

``` sourceCode
```

**slack\_api.json** - configures the client's bot tokens and bot name.

``` sourceCode
```

Running tests
=============

Tests for the bot are written in pytest and use pytest-cov and pytest-mock features. The easiest way to run tests is to open a shell at the app directory and run:

``` sourceCode
# Windows
py -3 -m pytest tests
```

Documentation
=============

Documentation is written in [Sphinx](http://www.sphinx-doc.org). This can be compiled from the source code using:

``` sourceCode
```

How it works
============

The Slack bot was built with the python [ChatterBot](https://github.com/gunthercox/ChatterBot) chatbot framework for processing chat messages. Custom input, output, and logic adapters were built to interact with chat messages from the Slack RTM API, using [python-slackclient](https://github.com/slackapi/python-slackclient).

The bot reads the input from the Slack RTM stream and processes any text that's associated with a bot mention. If this text is a recognised command, some change is made to the bot's state (connecting/disconnecting to a bot). If not, it is interpreted as a question to a connected bot, and a request for a response is made to the selected bot. The response is sent back to Slack via either RTM or Web API.

Contents:
=========

Report an issue
===============

Please direct all bug reports and feature requests to the project's issue tracker on [GitHub](https://github.com/TheGuardianWolf/tellmefacts/issues/).

Indices and tables
==================

-   genindex
-   modindex
-   search

